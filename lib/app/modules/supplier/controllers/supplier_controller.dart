// app/modules/suppliers/controllers/supplier_controller.dart

import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../../data/models/supplier_model.dart';
import '../view_models/supplier_view_model.dart';

class SupplierController extends GetxController {
  final SupplierViewModel supplierViewModel;
  
  // Form controllers
  final nameController = TextEditingController();
  final addressController = TextEditingController();
  final phoneController = TextEditingController();
  final emailController = TextEditingController();
  final contactPersonNameController = TextEditingController();
  final contactPersonPhoneController = TextEditingController();
  final websiteController = TextEditingController();
  final taxIdController = TextEditingController();
  final licenseNumberController = TextEditingController();
  final accountNumberController = TextEditingController();
  final bankNameController = TextEditingController();
  final bankBranchController = TextEditingController();
  final dueAmountController = TextEditingController();
  
  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  
  SupplierController({required this.supplierViewModel});

  @override
  void onInit() {
    super.onInit();
  }
  
  @override
  void onClose() {
    nameController.dispose();
    addressController.dispose();
    phoneController.dispose();
    emailController.dispose();
    contactPersonNameController.dispose();
    contactPersonPhoneController.dispose();
    websiteController.dispose();
    taxIdController.dispose();
    licenseNumberController.dispose();
    accountNumberController.dispose();
    bankNameController.dispose();
    bankBranchController.dispose();
    dueAmountController.dispose();
    super.onClose();
  }
  
  // Initialize form for adding a new supplier
  void initAddForm() {
    clearForm();
  }
  
  // Initialize form for editing an existing supplier
  void initEditForm(SupplierModel supplier) {
    nameController.text = supplier.name;
    addressController.text = supplier.address;
    phoneController.text = supplier.phone;
    emailController.text = supplier.email ?? '';
    contactPersonNameController.text = supplier.contactPersonName ?? '';
    contactPersonPhoneController.text = supplier.contactPersonPhone ?? '';
    websiteController.text = supplier.website ?? '';
    taxIdController.text = supplier.taxId ?? '';
    licenseNumberController.text = supplier.licenseNumber ?? '';
    accountNumberController.text = supplier.accountNumber ?? '';
    bankNameController.text = supplier.bankName ?? '';
    bankBranchController.text = supplier.bankBranch ?? '';
  }
  
  // Clear all form fields
  void clearForm() {
    nameController.clear();
    addressController.clear();
    phoneController.clear();
    emailController.clear();
    contactPersonNameController.clear();
    contactPersonPhoneController.clear();
    websiteController.clear();
    taxIdController.clear();
    licenseNumberController.clear();
    accountNumberController.clear();
    bankNameController.clear();
    bankBranchController.clear();
    dueAmountController.clear();
  }
  
  // Validate form fields
  bool validateForm() {
    return formKey.currentState?.validate() ?? false;
  }
  
  // Save a new supplier
  Future<bool> saveSupplier() async {
    if (!validateForm()) {
      return false;
    }
    
    final now = DateTime.now();
    final supplier = SupplierModel(
      id: '', // Will be generated by repository
      name: nameController.text.trim(),
      address: addressController.text.trim(),
      phone: phoneController.text.trim(),
      email: emailController.text.trim().isEmpty ? null : emailController.text.trim(),
      contactPersonName: contactPersonNameController.text.trim().isEmpty ? null : contactPersonNameController.text.trim(),
      contactPersonPhone: contactPersonPhoneController.text.trim().isEmpty ? null : contactPersonPhoneController.text.trim(),
      website: websiteController.text.trim().isEmpty ? null : websiteController.text.trim(),
      taxId: taxIdController.text.trim().isEmpty ? null : taxIdController.text.trim(),
      licenseNumber: licenseNumberController.text.trim().isEmpty ? null : licenseNumberController.text.trim(),
      accountNumber: accountNumberController.text.trim().isEmpty ? null : accountNumberController.text.trim(),
      bankName: bankNameController.text.trim().isEmpty ? null : bankNameController.text.trim(),
      bankBranch: bankBranchController.text.trim().isEmpty ? null : bankBranchController.text.trim(),
      createdAt: now,
      updatedAt: now,
    );
    
    return await supplierViewModel.addSupplier(supplier);
  }
  
  // Update an existing supplier
  Future<bool> updateSupplier(String id) async {
    if (!validateForm()) {
      return false;
    }
    
    final supplier = SupplierModel(
      id: id,
      name: nameController.text.trim(),
      address: addressController.text.trim(),
      phone: phoneController.text.trim(),
      email: emailController.text.trim().isEmpty ? null : emailController.text.trim(),
      contactPersonName: contactPersonNameController.text.trim().isEmpty ? null : contactPersonNameController.text.trim(),
      contactPersonPhone: contactPersonPhoneController.text.trim().isEmpty ? null : contactPersonPhoneController.text.trim(),
      website: websiteController.text.trim().isEmpty ? null : websiteController.text.trim(),
      taxId: taxIdController.text.trim().isEmpty ? null : taxIdController.text.trim(),
      licenseNumber: licenseNumberController.text.trim().isEmpty ? null : licenseNumberController.text.trim(),
      accountNumber: accountNumberController.text.trim().isEmpty ? null : accountNumberController.text.trim(),
      bankName: bankNameController.text.trim().isEmpty ? null : bankNameController.text.trim(),
      bankBranch: bankBranchController.text.trim().isEmpty ? null : bankBranchController.text.trim(),
      createdAt: supplierViewModel.selectedSupplier.value!.createdAt,
      updatedAt: DateTime.now(),
      totalPurchase: supplierViewModel.selectedSupplier.value!.totalPurchase,
      dueAmount: supplierViewModel.selectedSupplier.value!.dueAmount,
      isActive: supplierViewModel.selectedSupplier.value!.isActive,
    );
    
    return await supplierViewModel.updateSupplier(supplier);
  }
  
  // Pay supplier due amount
  Future<bool> payDue(String id) async {
    if (dueAmountController.text.isEmpty) {
      Get.snackbar('Error', 'Please enter the payment amount');
      return false;
    }
    
    final amount = double.tryParse(dueAmountController.text);
    if (amount == null || amount <= 0) {
      Get.snackbar('Error', 'Please enter a valid payment amount');
      return false;
    }
    
    if (amount > supplierViewModel.selectedSupplier.value!.dueAmount) {
      Get.snackbar('Error', 'Payment amount cannot exceed due amount');
      return false;
    }
    
    return await supplierViewModel.payDue(id, amount);
  }
  
  // Toggle supplier active status
  Future<bool> toggleSupplierStatus(String id, bool currentStatus) async {
    return await supplierViewModel.updateSupplierStatus(id, !currentStatus);
  }
  
  // Delete a supplier
  Future<bool> deleteSupplier(String id) async {
    return await supplierViewModel.deleteSupplier(id);
  }
  
  // Show delete confirmation dialog
  Future<void> showDeleteConfirmation(String id, String name) async {
    final result = await Get.dialog<bool>(
      AlertDialog(
        title: const Text('Delete Supplier'),
        content: Text('Are you sure you want to delete $name?'),
        actions: [
          TextButton(
            onPressed: () => Get.back(result: false),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => Get.back(result: true),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
    
    if (result == true) {
      final success = await deleteSupplier(id);
      if (success) {
        Get.back(); // Go back to the suppliers list
      }
    }
  }
  
  // Show pay due dialog
  Future<void> showPayDueDialog(String id, double dueAmount, String name) async {
    dueAmountController.clear();
    
    final result = await Get.dialog<bool>(
      AlertDialog(
        title: const Text('Pay Due Amount'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Supplier: $name'),
            Text('Total Due: \$${dueAmount.toStringAsFixed(2)}'),
            const SizedBox(height: 16),
            TextField(
              controller: dueAmountController,
              keyboardType: const TextInputType.numberWithOptions(decimal: true),
              decoration: const InputDecoration(
                labelText: 'Payment Amount',
                border: OutlineInputBorder(),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Get.back(result: false),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => Get.back(result: true),
            child: const Text('Pay'),
          ),
        ],
      ),
    );
    
    if (result == true) {
      await payDue(id);
    }
  }
  
  // Search suppliers
  void searchSuppliers(String query) {
    supplierViewModel.searchSuppliers(query);
  }
  
  // Filter suppliers
  void setFilter(String filter) {
    supplierViewModel.setFilter(filter);
  }
  
  // Sort suppliers
  void setSortBy(String sortBy) {
    supplierViewModel.setSortBy(sortBy);
  }
  
  // Toggle sort order
  void toggleSortOrder() {
    supplierViewModel.toggleSortOrder();
  }
  
  // Refresh supplier list
  Future<void> refreshSuppliers() async {
    await supplierViewModel.fetchAllSuppliers();
  }
}